name: Build Kivy Android APK (Fixed NDK 25)

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Set up Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y \
          git zip unzip autoconf libtool pkg-config \
          zlib1g-dev libncurses5-dev libncursesw5-dev libtinfo5 cmake \
          libffi-dev libssl-dev build-essential libsqlite3-dev sqlite3 \
          bzip2 libbz2-dev libreadline-dev llvm \
          xz-utils tk-dev libxml2-dev libxmlsec1-dev liblzma-dev \
          libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev \
          libportmidi-dev libswscale-dev libavformat-dev libavcodec-dev \
          libfreetype6-dev libpng-dev libjpeg-dev
    
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
    
    - name: Install specific NDK version and cleanup
      run: |
        echo "=== 🔧 NDK 25.2.9519653 설치 및 NDK 27 제거 ==="
        
        # NDK 25.2.9519653 설치
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "ndk;25.2.9519653"
        
        # NDK 27 제거 (모든 가능한 버전)
        echo "=== 🧹 NDK 27 버전들 제거 ==="
        find $ANDROID_HOME/ndk -name "*27.*" -type d -exec rm -rf {} + 2>/dev/null || true
        
        # NDK 25로 환경변수 설정
        export ANDROID_NDK_ROOT=$ANDROID_HOME/ndk/25.2.9519653
        export NDK_ROOT=$ANDROID_NDK_ROOT
        
        echo "=== ✅ NDK 설정 확인 ==="
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "ANDROID_NDK_ROOT: $ANDROID_NDK_ROOT"
        echo "사용 가능한 NDK 버전들:"
        ls -la $ANDROID_HOME/ndk/
        echo "NDK 25 내용 확인:"
        ls -la $ANDROID_NDK_ROOT/ | head -10
        
        # GitHub ENV에 저장
        echo "ANDROID_NDK_ROOT=$ANDROID_NDK_ROOT" >> $GITHUB_ENV
        echo "NDK_ROOT=$ANDROID_NDK_ROOT" >> $GITHUB_ENV
    
    - name: Install Python dependencies
      run: |
        echo "=== 🐍 Python 의존성 설치 ==="
        python -m pip install --upgrade pip setuptools wheel
        
        # 검증된 버전으로 고정 설치
        pip install Cython==0.29.33
        pip install python-for-android==2024.1.21
        pip install kivy==2.1.0
        pip install kivymd==1.1.1
        pip install requests pillow plyer
        # sqlite3는 내장 모듈이므로 제외
        
        echo "=== ✅ 설치된 패키지 확인 ==="
        pip list | grep -E "(kivy|p4a|python-for-android|cython)"
    
    - name: Clear p4a cache (Fresh Build)
      run: |
        echo "=== 🧹 p4a 캐시 클리어 ==="
        rm -rf ~/.local/share/python-for-android || true
        rm -rf ~/.buildozer || true
        echo "✅ 캐시 클리어 완료"
    
    - name: Create p4a build script
      run: |
        cat > build_apk.py << 'EOF'
        #!/usr/bin/env python3
        import os
        import sys
        import subprocess
        import shutil
        from pathlib import Path
        
        def main():
            print("=== 🚀 Kivy Android APK 빌드 시작 ===")
            
            # 환경변수 재확인 및 설정
            android_sdk = os.environ.get('ANDROID_SDK_ROOT')
            android_ndk = os.environ.get('ANDROID_NDK_ROOT')
            java_home = os.environ.get('JAVA_HOME')
            
            print(f"ANDROID_SDK_ROOT: {android_sdk}")
            print(f"ANDROID_NDK_ROOT: {android_ndk}")
            print(f"JAVA_HOME: {java_home}")
            
            # NDK 27 경로 체크 (보험)
            if android_ndk and '27.2.12479018' in android_ndk:
                print("❌ 여전히 NDK 27을 사용하고 있습니다!")
                # NDK 25로 강제 변경
                android_ndk = android_sdk + '/ndk/25.2.9519653'
                os.environ['ANDROID_NDK_ROOT'] = android_ndk
                os.environ['NDK_ROOT'] = android_ndk
                print(f"🔧 NDK 25로 강제 변경: {android_ndk}")
            
            # p4a 명령어 구성 (수정된 버전)
            cmd = [
                'p4a', 'apk',
                '--private', '.',
                '--package', 'com.skku.timetable.doublecheck',
                '--name', 'DoubleCheck',
                '--version', '1.0',
                '--bootstrap', 'sdl2',
                '--requirements', 'python3,kivy==2.1.0,kivymd==1.1.1,requests,pillow,certifi,urllib3,charset-normalizer,plyer',
                '--arch', 'arm64-v8a',
                '--ndk-api', '21',
                '--sdk-dir', android_sdk,
                '--ndk-dir', android_ndk,
                '--release'
            ]
            
            # 권한들을 개별적으로 추가 (수정됨 🔧)
            permissions = [
                'INTERNET',
                'WRITE_EXTERNAL_STORAGE', 
                'READ_EXTERNAL_STORAGE',
                'SCHEDULE_EXACT_ALARM',
                'USE_EXACT_ALARM',
                'VIBRATE',
                'WAKE_LOCK',
                'RECEIVE_BOOT_COMPLETED',
                'FOREGROUND_SERVICE',
                'POST_NOTIFICATIONS',
                'ACCESS_NOTIFICATION_POLICY',
                'SYSTEM_ALERT_WINDOW'
            ]
            
            for permission in permissions:
                cmd.extend(['--permission', permission])
            
            print(f"✅ {len(permissions)}개 권한 추가됨")
            
            # 선택적 파일들 추가 (수정됨 🔧)
            # AndroidManifest.tmpl.xml 대신 권한은 --permission으로 이미 처리됨
            # if Path('AndroidManifest.tmpl.xml').exists():
            #     cmd.extend(['--extra-manifest-xml', 'AndroidManifest.tmpl.xml'])
            #     print("✅ AndroidManifest.tmpl.xml 추가됨 (extra-manifest-xml)")
            print("📋 매니페스트 템플릿 생략 (권한은 --permission으로 처리됨)")
            
            if Path('android/src/main/java').exists():
                cmd.extend(['--add-source', 'android/src/main/java'])
                print("✅ Java 소스 디렉토리 추가됨")
            
            if Path('android/libs').exists():
                jar_count = 0
                for jar_file in Path('android/libs').glob('*.jar'):
                    cmd.extend(['--add-jar', str(jar_file)])
                    jar_count += 1
                    print(f"✅ JAR 파일 추가됨: {jar_file}")
                print(f"✅ 총 {jar_count}개 JAR 파일 추가됨")
            
            print("\n=== 🔨 p4a 명령어 ===")
            print(' '.join(cmd))
            print()
            
            # p4a 실행
            try:
                print("=== 📋 p4a 빌드 실행 중... ===")
                result = subprocess.run(cmd, text=True, capture_output=False)
                
                if result.returncode == 0:
                    print("\n✅ APK 빌드 성공!")
                    
                    # APK 파일 찾기
                    apk_files = list(Path('.').glob('*.apk'))
                    if not apk_files:
                        # dist 폴더에서도 찾아보기
                        dist_apks = list(Path('.').glob('dist/*.apk'))
                        apk_files.extend(dist_apks)
                    
                    if apk_files:
                        for apk in apk_files:
                            print(f"📱 생성된 APK: {apk}")
                            print(f"📊 파일 크기: {apk.stat().st_size // (1024*1024)} MB")
                    else:
                        print("⚠️ APK 파일을 찾을 수 없습니다.")
                        # p4a 출력 디렉토리에서 찾기
                        print("📂 p4a 출력 디렉토리 확인 중...")
                        p4a_dirs = list(Path.home().glob('.local/share/python-for-android/dists/*/bin/*.apk'))
                        for apk in p4a_dirs:
                            print(f"📱 p4a 디렉토리에서 발견: {apk}")
                            # 현재 디렉토리로 복사
                            shutil.copy2(apk, f"./{apk.name}")
                            print(f"📋 복사 완료: {apk.name}")
                    
                    return True
                else:
                    print(f"\n❌ APK 빌드 실패 (종료 코드: {result.returncode})")
                    return False
                    
            except Exception as e:
                print(f"\n❌ 빌드 실행 오류: {e}")
                return False
        
        if __name__ == '__main__':
            success = main()
            sys.exit(0 if success else 1)
        EOF
        
        chmod +x build_apk.py
    
    - name: Check project structure
      run: |
        echo "=== 📋 프로젝트 구조 확인 ==="
        echo "현재 디렉토리: $(pwd)"
        echo ""
        echo "주요 파일들:"
        echo "  main.py: $([ -f "main.py" ] && echo "✅" || echo "❌")"
        echo "  AndroidManifest.tmpl.xml: $([ -f "AndroidManifest.tmpl.xml" ] && echo "✅" || echo "❌")"
        echo ""
        echo "Android 관련 파일들:"
        if [ -d "android" ]; then
          echo "  android/: ✅"
          find android -type f -name "*.java" | head -5
          find android -type f -name "*.jar" | head -5
        else
          echo "  android/: ❌"
        fi
        echo ""
        echo "전체 파일 목록 (상위 20개):"
        find . -type f | head -20
    
    - name: Build APK
      run: |
        echo "=== 🏗️ APK 빌드 시작 ==="
        python build_apk.py
    
    - name: Verify build results
      run: |
        echo "=== 🔍 빌드 결과 확인 ==="
        
        # APK 파일 확인
        echo "생성된 APK 파일들:"
        find . -name "*.apk" -type f -exec ls -lh {} \;
        
        # p4a 빌드 디렉토리 확인
        echo ""
        echo "p4a 빌드 디렉토리:"
        P4A_BUILD_DIR=$(find ~/.local/share/python-for-android -name "dists" -type d 2>/dev/null | head -1)
        if [ -n "$P4A_BUILD_DIR" ]; then
          echo "빌드 디렉토리: $P4A_BUILD_DIR"
          ls -la "$P4A_BUILD_DIR/" || true
          
          # APK 파일 찾기 및 복사
          echo "p4a 디렉토리에서 APK 파일 찾는 중..."
          find "$P4A_BUILD_DIR" -name "*.apk" -type f -exec cp {} . \; -exec echo "📱 복사됨: {}" \;
        fi
        
        # 매니페스트 확인
        echo ""
        echo "AndroidManifest.xml 확인:"
        MANIFEST_FILE=$(find ~/.local/share/python-for-android -name "AndroidManifest.xml" -type f 2>/dev/null | head -1)
        if [ -n "$MANIFEST_FILE" ]; then
          echo "매니페스트 파일: $MANIFEST_FILE"
          echo "권한 개수: $(grep -c 'uses-permission' "$MANIFEST_FILE" 2>/dev/null || echo "0")"
          echo "서비스 개수: $(grep -c 'service' "$MANIFEST_FILE" 2>/dev/null || echo "0")"
          echo "리시버 개수: $(grep -c 'receiver' "$MANIFEST_FILE" 2>/dev/null || echo "0")"
        fi
        
        # 최종 APK 파일 목록
        echo ""
        echo "=== 📱 최종 APK 파일 목록 ==="
        ls -lh *.apk 2>/dev/null || echo "❌ APK 파일이 없습니다."
    
    - name: Upload APK artifact
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: kivy-android-apk
        path: "*.apk"
        retention-days: 30
        if-no-files-found: warn
    
    - name: Upload build logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          ~/.local/share/python-for-android/build.log
          ~/.local/share/python-for-android/*/build.log
        retention-days: 7
        if-no-files-found: ignore

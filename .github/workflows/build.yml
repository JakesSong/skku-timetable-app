name: Build Android APK
on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    # ✅ 완전한 클린 빌드
    - name: Complete clean build
      run: |
        echo "=== 🧹 Completely cleaning build environment ==="
        rm -rf .buildozer bin build android/build android/.gradle
        rm -rf ~/.buildozer ~/.gradle ~/.android
        echo "✅ 모든 캐시 제거 완료"

    # ✅ Java 17 세팅
    - name: Set up Java 17 for buildozer
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    # ✅ 시스템 종속 패키지 설치
    - name: Install system dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y \
          git zip unzip autoconf libtool pkg-config \
          zlib1g-dev libncurses5-dev libncursesw5-dev libtinfo5 cmake \
          libffi-dev libssl-dev build-essential libsqlite3-dev sqlite3 \
          bzip2 libbz2-dev libreadline-dev llvm \
          xz-utils tk-dev libxml2-dev libxmlsec1-dev liblzma-dev \
          libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev \
          libportmidi-dev libswscale-dev libavformat-dev libavcodec-dev \
          libfreetype6-dev libpng-dev libjpeg-dev

    # ✅ 파이썬 의존성 설치
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade setuptools wheel
        pip install Cython==0.29.33
        pip install buildozer==1.4.0

    # ✅ 환경 변수 설정
    - name: Set environment variables
      run: |
        echo "P4A_NUM_PROCS=1" >> $GITHUB_ENV
        echo "GRADLE_OPTS=-Dorg.gradle.daemon=false -Dorg.gradle.jvmargs='-Xmx3072m -XX:MaxMetaspaceSize=768m' -Dorg.gradle.parallel=false" >> $GITHUB_ENV
        echo "P4A_GRADLE_OPTS=--stacktrace --info" >> $GITHUB_ENV

    # ✅ APK 수정 도구 설치
    - name: Install APK modification tools
      run: |
        echo "=== 🛠️ APK 수정 도구 설치 ==="
        
        # Android SDK 명령줄 도구 설치
        echo "📥 Android SDK 명령줄 도구 다운로드..."
        mkdir -p ~/android-sdk
        cd ~/android-sdk
        
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
        unzip -q commandlinetools-linux-11076708_latest.zip
        mkdir -p cmdline-tools/latest
        mv cmdline-tools/* cmdline-tools/latest/ 2>/dev/null || true
        
        # 환경 변수 설정
        export ANDROID_SDK_ROOT=~/android-sdk
        export PATH=$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/build-tools/33.0.2
        echo "ANDROID_SDK_ROOT=~/android-sdk" >> $GITHUB_ENV
        echo "~/android-sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
        echo "~/android-sdk/build-tools/33.0.2" >> $GITHUB_PATH
        
        # SDK 라이센스 자동 동의
        yes | sdkmanager --licenses
        
        # build-tools 설치 (zipalign 포함)
        echo "🔧 Android Build Tools 설치..."
        sdkmanager "build-tools;33.0.2"
        
        # apktool 다운로드 및 설치
        echo "📥 apktool 다운로드..."
        cd ~
        wget -q https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool
        wget -q https://bitbucket.org/iBotPeaches/apktool/downloads/apktool_2.9.3.jar
        
        chmod +x apktool
        sudo mv apktool /usr/local/bin/
        sudo mv apktool_2.9.3.jar /usr/local/bin/apktool.jar
        
        echo "✅ 모든 도구 설치 완료"

    # ✅ 빌드 수행
    - name: Build APK with buildozer
      run: |
        echo "=== 🔨 Buildozer APK 빌드 ==="
        buildozer android debug --verbose > build_full.log 2>&1 || BUILD_FAILED=true
        if [ "$BUILD_FAILED" = "true" ]; then
          echo "❌ 빌드 실패!"
          echo "=== 빌드 로그 마지막 100줄 ==="
          tail -100 build_full.log
          exit 1
        else
          echo "✅ 빌드 성공!"
        fi

    # ✅ APK 파일 찾기 및 검증
    - name: Find and verify APK
      run: |
        echo "=== 🔍 APK 파일 찾기 및 검증 ==="
        
        # APK 파일 자동 탐지
        POSSIBLE_APKS=(
          "./bin/doublecheck-0.1-arm64-v8a-debug.apk"
          "./bin/*.apk"
          ".buildozer/android/platform/build-arm64-v8a/dists/doublecheck/build/outputs/apk/debug/*.apk"
        )
        
        FOUND_APK=""
        for apk_pattern in "${POSSIBLE_APKS[@]}"; do
          for apk_file in $apk_pattern; do
            if [ -f "$apk_file" ]; then
              FOUND_APK="$apk_file"
              echo "✅ APK 발견: $FOUND_APK"
              break 2
            fi
          done
        done
        
        if [ -z "$FOUND_APK" ]; then
          FOUND_APK=$(find . -name "*debug*.apk" -type f | head -1)
          if [ -n "$FOUND_APK" ]; then
            echo "✅ 전체 검색으로 APK 발견: $FOUND_APK"
          else
            echo "❌ APK 파일을 찾을 수 없음"
            exit 1
          fi
        fi
        
        echo "ORIGINAL_APK=$FOUND_APK" >> $GITHUB_ENV
        echo "📊 APK 크기: $(du -h "$FOUND_APK" | cut -f1)"

    # ✅ APK 수정 (AlarmReceiver 추가)
    - name: Modify APK to add AlarmReceiver
      run: |
        echo "=== 🔧 APK 수정 (AlarmReceiver 추가) ==="
        
        if [ -z "${ORIGINAL_APK:-}" ] || [ ! -f "$ORIGINAL_APK" ]; then
          echo "❌ 원본 APK 없음"
          exit 1
        fi
        
        echo "🎯 대상 APK: $ORIGINAL_APK"
        
        # 백업 생성
        cp "$ORIGINAL_APK" original_backup.apk
        echo "✅ 원본 백업 완료"
        
        # 작업 공간 정리
        rm -rf decoded_apk_clean
        
        # APK 디컴파일
        echo "📦 APK 디컴파일..."
        if apktool d "$ORIGINAL_APK" -o decoded_apk_clean --force; then
          echo "✅ APK 디컴파일 성공"
        else
          echo "❌ APK 디컴파일 실패"
          exit 1
        fi
        
        # AndroidManifest.xml 수정
        MANIFEST="decoded_apk_clean/AndroidManifest.xml"
        cp "$MANIFEST" "${MANIFEST}.backup"
        
        echo "🔍 현재 receiver 개수: $(grep -c '<receiver' "$MANIFEST" 2>/dev/null || echo "0")"
        
        if grep -q "AlarmReceiver" "$MANIFEST"; then
          echo "⚠️ AlarmReceiver 이미 존재함 - 수정하지 않음"
        else
          echo "➕ AlarmReceiver 추가 중..."
          
          if grep -q "</application>" "$MANIFEST"; then
            sed -i '/<\/application>/i\        <receiver android:name="org.kivy.skkutimetable.doublecheck.AlarmReceiver" android:enabled="true" android:exported="true">\
            <intent-filter>\
                <action android:name="android.intent.action.BOOT_COMPLETED" />\
            </intent-filter>\
        </receiver>' "$MANIFEST"
            echo "✅ AlarmReceiver 추가 완료"
          else
            echo "❌ </application> 태그 없음"
            exit 1
          fi
        fi
        
        # 수정 결과 검증
        if grep -q "AlarmReceiver" "$MANIFEST"; then
          echo "✅ AlarmReceiver 확인됨"
          echo "📊 수정 후 receiver 개수: $(grep -c '<receiver' "$MANIFEST" 2>/dev/null || echo "0")"
        else
          echo "❌ AlarmReceiver 추가 실패"
          exit 1
        fi

    # ✅ 수정된 APK 리빌드 및 서명
    - name: Rebuild and sign modified APK
      run: |
        echo "=== 🔨 수정된 APK 리빌드 및 서명 ==="
        
        # APK 리빌드
        echo "📦 APK 리빌드..."
        if apktool b decoded_apk_clean -o rebuilt_doublecheck.apk --force-all; then
          echo "✅ APK 리빌드 성공"
          echo "📊 리빌드 APK 크기: $(du -h rebuilt_doublecheck.apk | cut -f1)"
        else
          echo "❌ APK 리빌드 실패"
          exit 1
        fi
        
        # 기존 서명 제거
        echo "🗑️ 기존 서명 제거..."
        zip -d rebuilt_doublecheck.apk META-INF/\* 2>/dev/null || echo "기존 서명 없음"
        
        # 디버그 키스토어 생성
        if [ ! -f "debug.keystore" ]; then
          echo "🔑 디버그 키스토어 생성..."
          keytool -genkey -v \
            -keystore debug.keystore \
            -alias androiddebugkey \
            -keyalg RSA \
            -keysize 2048 \
            -validity 10000 \
            -dname "CN=Android Debug,O=Android,C=US" \
            -storepass android \
            -keypass android
        fi
        
        # APK 서명
        echo "🔏 APK 서명..."
        jarsigner -verbose \
          -sigalg SHA256withRSA \
          -digestalg SHA-256 \
          -keystore debug.keystore \
          -storepass android \
          -keypass android \
          rebuilt_doublecheck.apk \
          androiddebugkey
        
        # 서명 검증
        if jarsigner -verify rebuilt_doublecheck.apk 2>/dev/null; then
          echo "✅ 서명 검증 성공"
        else
          echo "❌ 서명 검증 실패"
          exit 1
        fi
        
        # zipalign 정렬
        ZIPALIGN_PATH="$HOME/android-sdk/build-tools/33.0.2/zipalign"
        if [ -f "$ZIPALIGN_PATH" ]; then
          echo "🔧 APK 정렬..."
          $ZIPALIGN_PATH -f 4 rebuilt_doublecheck.apk final_doublecheck_fixed.apk
          echo "✅ APK 정렬 완료"
        else
          echo "⚠️ zipalign 없음 - 서명된 APK 사용"
          cp rebuilt_doublecheck.apk final_doublecheck_fixed.apk
        fi

    # ✅ 최종 APK 검증
    - name: Final APK validation
      run: |
        echo "=== 🎯 최종 APK 검증 ==="
        
        APK_TO_TEST="final_doublecheck_fixed.apk"
        
        if [ ! -f "$APK_TO_TEST" ]; then
          echo "❌ 최종 APK 없음"
          exit 1
        fi
        
        echo "📱 최종 APK 정보:"
        echo "파일명: $APK_TO_TEST"
        echo "크기: $(du -h "$APK_TO_TEST" | cut -f1)"
        
        # 서명 검증
        if jarsigner -verify "$APK_TO_TEST" 2>/dev/null; then
          echo "✅ 서명 유효"
        else
          echo "❌ 서명 무효"
        fi
        
        # 최종 매니페스트 확인
        apktool d "$APK_TO_TEST" -o final_verification --force >/dev/null 2>&1
        
        if [ -f "final_verification/AndroidManifest.xml" ]; then
          FINAL_MANIFEST="final_verification/AndroidManifest.xml"
          
          echo "🔍 기본 정보:"
          echo "package: $(grep 'package=' "$FINAL_MANIFEST" | head -1)"
          echo "activity: $(grep -c '<activity' "$FINAL_MANIFEST" 2>/dev/null || echo "0")개"
          echo "receiver: $(grep -c '<receiver' "$FINAL_MANIFEST" 2>/dev/null || echo "0")개"
          
          if grep -q "AlarmReceiver" "$FINAL_MANIFEST"; then
            echo "✅ AlarmReceiver 정상 포함!"
          else
            echo "❌ AlarmReceiver 없음"
          fi
          
          if grep -A 10 'android.intent.action.MAIN' "$FINAL_MANIFEST" | grep -q 'android:name'; then
            echo "✅ MAIN 액티비티 존재"
          else
            echo "❌ MAIN 액티비티 없음 - 앱 실행 불가"
          fi
        fi
        
        echo "🎉 최종 수정된 APK 준비 완료: $APK_TO_TEST"

    # ✅ 원본 APK 분석 (디버깅용)
    - name: Analyze original APK for debugging
      if: always()
      run: |
        echo "=== 🔍 원본 APK 분석 (디버깅용) ==="
        
        if [ -f "${ORIGINAL_APK:-}" ]; then
          echo "📦 원본 APK 디컴파일 및 분석..."
          apktool d "$ORIGINAL_APK" -o original_analysis --force >/dev/null 2>&1
          
          if [ -f "original_analysis/AndroidManifest.xml" ]; then
            ORIG_MANIFEST="original_analysis/AndroidManifest.xml"
            echo "원본 APK 매니페스트 정보:"
            echo "activity: $(grep -c '<activity' "$ORIG_MANIFEST" 2>/dev/null || echo "0")개"
            echo "receiver: $(grep -c '<receiver' "$ORIG_MANIFEST" 2>/dev/null || echo "0")개"
            echo "service: $(grep -c '<service' "$ORIG_MANIFEST" 2>/dev/null || echo "0")개"
            echo "권한: $(grep -c '<uses-permission' "$ORIG_MANIFEST" 2>/dev/null || echo "0")개"
            
            if grep -q "AlarmReceiver" "$ORIG_MANIFEST"; then
              echo "⚠️ 원본에 이미 AlarmReceiver 존재"
            else
              echo "❌ 원본에 AlarmReceiver 없음"
            fi
          fi
        fi

    # ✅ 빌드 로그 업로드
    - name: Upload build logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: build-logs-${{ github.run_number }}
        path: |
          build_full.log
          .buildozer/**/*.log
          original_analysis/AndroidManifest.xml
          final_verification/AndroidManifest.xml
        retention-days: 30
        if-no-files-found: warn

    # ✅ 최종 APK 업로드
    - name: Upload final APKs
      uses: actions/upload-artifact@v4
      with:
        name: doublecheck-apks-${{ github.run_number }}
        path: |
          final_doublecheck_fixed.apk
          original_backup.apk
        retention-days: 7
        if-no-files-found: error

name: Build Android APK (Standard)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 45

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.8
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-standard
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Cache buildozer directory
      uses: actions/cache@v3
      with:
        path: .buildozer
        key: ${{ runner.os }}-buildozer-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          git \
          python3 \
          python3-dev \
          ffmpeg \
          libsdl2-dev \
          libsdl2-image-dev \
          libsdl2-mixer-dev \
          libsdl2-ttf-dev \
          libportmidi-dev \
          libswscale-dev \
          libavformat-dev \
          libavcodec-dev \
          zlib1g-dev \
          libgstreamer1.0-0 \
          libunwind-dev \
          libgstreamer1.0-dev \
          gstreamer1.0-plugins-base \
          gstreamer1.0-plugins-good \
          openjdk-17-jdk \
          unzip \
          libncurses5-dev \
          libncursesw5-dev \
          libtinfo5 \
          cmake \
          libffi-dev \
          libssl-dev

    - name: Set up Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Set up Android SDK
      uses: android-actions/setup-android@v3
      with:
        cmdline-tools-version: 8512546
        packages: "platforms;android-33 build-tools;32.0.0 platform-tools ndk;25.2.9519653"

    - name: Install standard buildozer and dependencies
      run: |
        echo "📦 === INSTALLING STANDARD BUILDOZER ==="
        python -m pip install --upgrade pip
        
        # 표준 안정 버전들 설치
        pip install buildozer==1.5.0
        pip install kivy==2.1.0
        pip install kivymd==1.1.1
        pip install cython==0.29.33
        pip install requests beautifulsoup4
        
        echo "✅ Standard packages installed"

    - name: Verify buildozer installation
      run: |
        echo "📋 Buildozer version:"
        buildozer version
        
        echo "📄 Checking buildozer.spec:"
        ls -la buildozer.spec

    - name: Accept Android SDK licenses
      run: |
        echo "🔑 === SDK LICENSES ==="
        yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses || true

    - name: Clean previous builds (selective)
      run: |
        echo "🧹 === CLEANING PREVIOUS BUILDS ==="
        if [ -d .buildozer/android/platform/python-for-android ]; then
          echo "✅ python-for-android exists, safe to clean"
          buildozer android clean
        else
          echo "⚠️ First time build - skipping clean"
        fi
        rm -rf bin

    - name: Build APK with standard buildozer
      run: |
        echo "🚀 === BUILDING APK WITH STANDARD BUILDOZER ==="
        echo "⏰ Build started at: $(date)"
        
        echo "📝 Final buildozer.spec verification:"
        echo "Key settings:"
        grep -E "android\.(api|minapi|sdk|permissions)" buildozer.spec || echo "❌ Settings not found"
        
        echo "🔨 Starting standard build..."
        buildozer android debug --verbose
        
        echo "✅ Build completed at: $(date)"
      timeout-minutes: 40

    - name: Verify build results
      if: success()
      run: |
        echo "📱 === BUILD RESULTS ==="
        echo "📁 Generated files:"
        find . -name "*.apk" -type f -exec ls -lh {} \; 2>/dev/null || echo "No APK files found"
        
        # APK 파일 찾기
        APK_FILE=$(find . -name "*.apk" -type f | head -1)
        if [ -z "$APK_FILE" ]; then
          echo "❌ APK file not found"
          exit 1
        fi
        
        echo "📱 Found APK: $APK_FILE"
        echo "📏 APK Size: $(ls -lh "$APK_FILE" | awk '{print $5}')"
        
        # 간단한 APK 검증
        if [ -s "$APK_FILE" ]; then
          echo "✅ APK file exists and has content"
        else
          echo "❌ APK file is empty or corrupted"
          exit 1
        fi

    - name: Upload APK artifact
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: standard-android-apk
        path: ./bin/*.apk
        if-no-files-found: warn

    - name: Upload build logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          ./.buildozer/android/platform/build-*/logs/
          ./.buildozer/**/*.log
        if-no-files-found: ignore

name: Build Android APK with Custom Buildozer

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 60

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.8
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-custom-buildozer
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Cache buildozer directory
      uses: actions/cache@v3
      with:
        path: .buildozer
        key: ${{ runner.os }}-buildozer-custom-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-custom-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          git \
          python3 \
          python3-dev \
          ffmpeg \
          libsdl2-dev \
          libsdl2-image-dev \
          libsdl2-mixer-dev \
          libsdl2-ttf-dev \
          libportmidi-dev \
          libswscale-dev \
          libavformat-dev \
          libavcodec-dev \
          zlib1g-dev \
          libgstreamer1.0-0 \
          libgstreamer1.0-dev \
          libunwind-dev \
          gstreamer1.0-plugins-base \
          gstreamer1.0-plugins-good \
          openjdk-17-jdk \
          unzip \
          libncurses5-dev \
          libncursesw5-dev \
          libtinfo5 \
          cmake \
          libffi-dev \
          libssl-dev

    - name: Set up Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Set up Android SDK
      uses: android-actions/setup-android@v3
      with:
        cmdline-tools-version: 8512546
        packages: "platforms;android-33 build-tools;32.0.0 platform-tools ndk;25.2.9519653"

    - name: Install custom buildozer with PR #1519 support
      run: |
        echo "üîß === INSTALLING CUSTOM BUILDOZER ==="
        python -m pip install --upgrade pip
        
        # PR #1519Í∞Ä Ï†ÅÏö©Îêú buildozer fork ÏÑ§Ïπò (dvjdjvuÏùò fork)
        echo "üì• Installing custom buildozer fork with PR #1519..."
        pip install git+https://github.com/dvjdjvu/buildozer.git@master
        
        # ÌïÑÏöîÌïú python-for-androidÎèÑ ÏÑ§Ïπò
        echo "üì• Installing custom python-for-android..."
        pip install git+https://github.com/dvjdjvu/python-for-android.git@master
        
        echo "üì¶ Installing other dependencies..."
        pip install kivy==2.1.0
        pip install kivymd==1.1.1
        pip install cython==0.29.33
        pip install requests beautifulsoup4

    - name: Verify custom buildozer installation
      run: |
        echo "üîç === VERIFYING CUSTOM BUILDOZER ==="
        
        echo "üìã Buildozer version:"
        buildozer version || pip show buildozer
        
        echo -e "\nüìÑ Testing extra_manifest_application_entry support:"
        python -c "
        try:
            from buildozer.targets.android import TargetAndroid
            print('‚úÖ Custom buildozer imported successfully')
            # buildozer ÏÜåÏä§ÏΩîÎìúÏóêÏÑú extra_manifest_application_entry ÏßÄÏõê ÌôïÏù∏
            import inspect
            print('‚úÖ Checking for PR #1519 support...')
        except Exception as e:
            print(f'‚ùå Error: {e}')
        "

    - name: Verify project configuration  
      run: |
        echo "üîç === PROJECT VERIFICATION ==="
        echo "üìÅ Current directory:"
        ls -la
        
        echo -e "\nüìÑ buildozer.spec key settings:"
        echo "üîß Extra manifest entry (PR #1519):"
        grep -n "android.extra_manifest_application_entry" buildozer.spec || echo "‚ùå PR #1519 setting not found"
        echo "üîß Android permissions:"
        grep -n "android.permissions" buildozer.spec || echo "‚ùå No permissions found"
        echo "üîß Java source path:"
        grep -n "android.add_src" buildozer.spec || echo "‚ùå No Java source path found"
        
        echo -e "\nüìÅ xml/receivers.xml verification:"
        if [ -f xml/receivers.xml ]; then
          echo "‚úÖ receivers.xml exists"
          echo "üìÑ Content:"
          cat xml/receivers.xml
        else
          echo "‚ùå xml/receivers.xml NOT found"
        fi
        
        echo -e "\nüìÅ Java source verification:"
        if [ -d android/src/main/java ]; then
          echo "‚úÖ Java source directory exists"
          find android/src/main/java -name "*.java" -type f || echo "No Java files found"
        else
          echo "‚ùå Java source directory NOT found"
        fi

    - name: Accept Android SDK licenses
      run: |
        echo "üîë === SDK LICENSES ==="
        yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses || true

    - name: Clean previous builds (selective)
      run: |
        echo "üßπ === CLEANING PREVIOUS BUILDS ==="
        if [ -d .buildozer/android/platform/python-for-android ]; then
          echo "‚úÖ python-for-android exists, safe to clean"
          buildozer android clean
        else
          echo "‚ö†Ô∏è First time build - skipping clean"
        fi
        rm -rf bin

    - name: Build APK with custom buildozer
      run: |
        echo "üöÄ === BUILDING APK WITH CUSTOM BUILDOZER ==="
        echo "‚è∞ Build started at: $(date)"
        
        echo -e "\nüìù Final buildozer.spec verification:"
        echo "Last 20 lines:"
        tail -20 buildozer.spec
        
        echo -e "\nüî® Starting build with PR #1519 support..."
        buildozer android debug --verbose
        
        echo -e "\n‚úÖ Build completed at: $(date)"
      timeout-minutes: 50

    - name: Verify AlarmReceiver in generated APK
      if: success()
      run: |
        echo "üîç === VERIFYING ALARMRECEIVER IN APK ==="
        
        # APK ÌååÏùº Ï∞æÍ∏∞
        APK_FILE=$(find . -name "*.apk" -type f | head -1)
        if [ -z "$APK_FILE" ]; then
          echo "‚ùå APK file not found"
          exit 1
        fi
        
        echo "üì± Found APK: $APK_FILE"
        
        # APK ÎÇ¥Ïö© ÌôïÏù∏ (aapt ÏÇ¨Ïö©)
        echo -e "\nüìÑ Checking AndroidManifest.xml in APK..."
        $ANDROID_SDK_ROOT/build-tools/32.0.0/aapt dump xmltree "$APK_FILE" AndroidManifest.xml | grep -A 5 -B 5 "AlarmReceiver\|BOOT_COMPLETED" || echo "‚ö†Ô∏è AlarmReceiver not found in manifest"

    - name: Debug build results
      if: always()
      run: |
        echo "üì± === BUILD RESULTS ==="
        echo "üìÅ Generated files:"
        find . -name "*.apk" -type f -exec ls -lh {} \; 2>/dev/null || echo "No APK files found"
        
        if [ -d bin ]; then
          ls -la bin/
        else
          echo "‚ùå bin directory not found"
        fi

    - name: Upload APK artifact
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: custom-buildozer-apk
        path: ./bin/*.apk
        if-no-files-found: warn

    - name: Upload build logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: custom-buildozer-logs
        path: |
          ./.buildozer/android/platform/build-*/logs/
          ./.buildozer/**/*.log
        if-no-files-found: ignore

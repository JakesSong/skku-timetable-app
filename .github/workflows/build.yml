name: Build Android APK
on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Python 3.9
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    # ✅ 완전한 클린 빌드
    - name: Complete clean build
      run: |
        echo "=== 🧹 Completely cleaning build environment ==="
        
        # 프로젝트 디렉토리 기준
        rm -rf .buildozer
        rm -rf bin
        rm -rf build
        rm -rf android/build
        rm -rf android/.gradle
    
        # 사용자 캐시 디렉토리 기준
        rm -rf ~/.buildozer
        rm -rf ~/.gradle
        rm -rf ~/.android
    
        echo "✅ 모든 캐시 제거 완료"

    # ✅ .java 파일 경로 확인
    - name: Check java file visibility
      run: |
        echo "=== 🔍 java 파일 경로 확인 ==="
        find android/src -type f -name "*.java" || echo "❌ java 파일 없음"
        if [ -d "android/src/main/java/org/kivy/skkutimetable/doublecheck" ]; then
          echo "✅ java 소스 디렉토리 존재함"
          ls -R android/src/main/java/org/kivy/skkutimetable/doublecheck
        else
          echo "❌ java 소스 디렉토리 없음"
        fi

    # ✅ buildozer.spec manifest 설정 확인
    - name: Check manifest configuration in buildozer.spec
      run: |
        echo "=== 🔧 buildozer.spec manifest 설정 확인 ==="
        if [ -f "buildozer.spec" ]; then
          echo "--- manifest 관련 설정들 ---"
          grep -n "manifest" buildozer.spec || echo "manifest 설정 없음"
          echo "--- android.manifest_template 설정 ---"
          grep -n "android.manifest_template" buildozer.spec || echo "android.manifest_template 설정 없음"
        else
          echo "❌ buildozer.spec 파일 없음"
        fi

    # ✅ buildozer.spec manifest 설정 확인 (템플릿 방식)
    - name: Check manifest configuration in buildozer.spec (template mode)
      run: |
        echo "=== 🔧 buildozer.spec manifest 설정 확인 (템플릿 방식) ==="
        if [ -f "buildozer.spec" ]; then
          echo "--- manifest 관련 설정들 ---"
          grep -n "manifest" buildozer.spec || echo "manifest 설정 없음"
          echo "--- android.manifest_template 설정 ---"
          grep -n "android.manifest_template" buildozer.spec || echo "android.manifest_template 설정 없음"
          echo "--- 주석 처리된 android.add_manifest_xml 확인 ---"
          grep -n "android.add_manifest_xml" buildozer.spec || echo "android.add_manifest_xml 설정 없음"
          echo ""
          echo "--- AndroidManifest.tmpl.xml 파일 존재 확인 ---"
          if [ -f "AndroidManifest.tmpl.xml" ]; then
            echo "✅ AndroidManifest.tmpl.xml 파일 존재"
            echo "--- 템플릿 파일 크기 ---"
            ls -la AndroidManifest.tmpl.xml
            echo "--- 템플릿 파일 첫 10줄 ---"
            head -10 AndroidManifest.tmpl.xml
            echo "--- AlarmReceiver 포함 여부 ---"
            grep -n "AlarmReceiver" AndroidManifest.tmpl.xml || echo "❌ AlarmReceiver 없음"
            echo "--- NonExistentReceiver 디버그 코드 확인 ---"
            grep -n "NonExistentReceiver" AndroidManifest.tmpl.xml || echo "NonExistentReceiver 없음"
          else
            echo "❌ AndroidManifest.tmpl.xml 파일 없음"
          fi
        else
          echo "❌ buildozer.spec 파일 없음"
        fi

    # ✅ Java 17 세팅
    - name: Set up Java 17 for buildozer
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    # ✅ 시스템 종속 패키지 설치
    - name: Install system dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y \
          git zip unzip autoconf libtool pkg-config \
          zlib1g-dev libncurses5-dev libncursesw5-dev libtinfo5 cmake \
          libffi-dev libssl-dev build-essential libsqlite3-dev sqlite3 \
          bzip2 libbz2-dev libreadline-dev llvm \
          xz-utils tk-dev libxml2-dev libxmlsec1-dev liblzma-dev \
          libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev \
          libportmidi-dev libswscale-dev libavformat-dev libavcodec-dev \
          libfreetype6-dev libpng-dev libjpeg-dev

    # ✅ 파이썬 의연성 설치
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade setuptools wheel
        pip install Cython==0.29.33
        pip install buildozer==1.4.0

    # 🎯 여기에 디버그 코드들 추가!
    - name: Check buildozer template processing
      run: |
        echo "=== 🔍 buildozer 템플릿 처리 과정 추적 ==="
        buildozer android debug 2>&1 | grep -i "template\|manifest" || echo "템플릿 관련 로그 없음"
    
    - name: Check template file location and processing  
      run: |
        echo "=== 🔍 템플릿 파일 위치와 처리 확인 ==="
        echo "현재 위치의 AndroidManifest.tmpl.xml:"
        ls -la AndroidManifest.tmpl.xml || echo "없음"
        echo ""
        echo "buildozer가 템플릿을 어디서 찾는지 확인:"
        find . -name "*.tmpl.xml" 2>/dev/null || echo "tmpl.xml 파일 없음"
        echo ""
        echo "buildozer 내부에서 템플릿 복사 흔적:"
        find .buildozer -name "*tmpl*" 2>/dev/null || echo "buildozer 내부에 tmpl 흔적 없음"
    
    # 기존 빌드 단계
    - name: Build APK with buildozer
      run: buildozer android debug

    # ✅ 환경 변수 설정
    - name: Set environment variables
      run: |
        echo "P4A_NUM_PROCS=1" >> $GITHUB_ENV
        echo "GRADLE_OPTS=-Dorg.gradle.daemon=false -Dorg.gradle.jvmargs='-Xmx3072m -XX:MaxMetaspaceSize=768m' -Dorg.gradle.parallel=false" >> $GITHUB_ENV
        echo "P4A_GRADLE_OPTS=--stacktrace --info" >> $GITHUB_ENV

    # ✅ 빌드 수행 및 로그 저장
    - name: Build APK
      run: |
        echo "=== Build start ==="
        buildozer android debug --verbose > build_full.log 2>&1 || BUILD_FAILED=true
        if [ "$BUILD_FAILED" = "true" ]; then
          echo "❌ 빌드 실패!"
          echo "=== 빌드 로그 마지리 100줄 ==="
          tail -100 build_full.log
          echo "=== AndroidManifest 관련 로그 검색 ==="
          grep -i "manifest" build_full.log | tail -20 || echo "manifest 관련 로그 없음"
          exit 1
        else
          echo "✅ 빌드 성공!"
        fi

    - name: Check Java compilation results
      run: |
        echo "=== 🔍 .class 파일 생성 여부 확인 ==="
        
        # .class 파일 검색
        find .buildozer -type f -name "*.class" || echo "❌ .class 파일 없음"
    
        echo ""
        echo "=== 🔍 AlarmReceiver 관련 .class 파일 존재 여부 ==="
        find .buildozer -type f -name "*AlarmReceiver*.class" || echo "❌ AlarmReceiver .class 파일 없음"
    
        echo ""
        echo "=== 🔍 Java 컴파일 로그 추적 (javac 호출 확인) ==="
        grep -i "javac" build_full.log | tail -20 || echo "❌ javac 호출 로그 없음"
    
        echo ""
        echo "=== 🔍 Java 소스가 포함된 컴파일 대상 목록 (javaCompile)" 
        grep -i "javaCompile" build_full.log | tail -20 || echo "❌ javaCompile 관련 로그 없음"
    

    # ✅ APK 디켜폴 및 AlarmReceiver 확인
    - name: Decompile APK and check AlarmReceiver
      run: |
        echo "=== 🔍 apktool 설치 ==="
        sudo apt-get install -y apktool

        echo "=== 📆 apk 디켜폴 중 ==="
        apktool d bin/*.apk -o decoded_apk || echo "❌ apktool 실패"

        echo ""
        echo "=== 🔍 AndroidManifest.xml 내 AlarmReceiver 확인 ==="
        if [ -f "decoded_apk/AndroidManifest.xml" ]; then
          grep -A 5 -B 2 "AlarmReceiver" decoded_apk/AndroidManifest.xml || echo "❌ AlarmReceiver 없음"
        else
          echo "❌ decoded_apk/AndroidManifest.xml 없음"
        fi

        echo ""
        echo "=== 🔍 AlarmReceiver 클래스(smali) 존재 확인 ==="
        find decoded_apk/smali -type f -name "*AlarmReceiver*.smali" || echo "❌ AlarmReceiver 클래스 없음"

    # ✅ 빌드 후 생성된 AndroidManifest.xml 철저 분석
    - name: Analyze generated AndroidManifest.xml (Enhanced)
      if: always()
      run: |
        echo "=== 🔍 생성된 AndroidManifest.xml 철저 분석 ==="
        echo "모든 AndroidManifest.xml 파일 찾기:"
        find .buildozer -name "AndroidManifest.xml" -type f 2>/dev/null | while read -r file; do
          echo "📁 $file ($(wc -c < "$file") bytes)"
        done || echo "AndroidManifest.xml 없음"
        
        echo ""
        echo "=== 🔍 주요 매니페스트 파일들 상세 분석 ==="
        MAIN_MANIFESTS=(
          ".buildozer/android/platform/build-arm64-v8a/dists/doublecheck/src/main/AndroidManifest.xml"
          ".buildozer/android/platform/build-arm64-v8a/dists/doublecheck/AndroidManifest.xml"
          ".buildozer/android/platform/build-arm64-v8a/dists/doublecheck/build/intermediates/merged_manifests/debug/AndroidManifest.xml"
        )
        
        for manifest in "${MAIN_MANIFESTS[@]}"; do
          if [ -f "$manifest" ]; then
            echo ""
            echo "🎯 ================== 매니페스트 분석: $manifest =================="
            echo "📊 파일 정보: $(wc -c < "$manifest") bytes, $(wc -l < "$manifest") 줄"
            
            echo ""
            echo "--- 📋 기본 정보 ---"
            grep "package=" "$manifest" | head -1 || echo "패키지 정보 없음"
            grep "android:versionCode=" "$manifest" | head -1 || echo "버전 코드 없음"
            grep "android:versionName=" "$manifest" | head -1 || echo "버전 이름 없음"
            
            echo ""
            echo "--- 🔍 전체 구조 통계 ---"
            echo "uses-permission: $(grep -c '<uses-permission' "$manifest" 2>/dev/null || echo "0")개"
            echo "activity: $(grep -c '<activity' "$manifest" 2>/dev/null || echo "0")개"
            echo "receiver: $(grep -c '<receiver' "$manifest" 2>/dev/null || echo "0")개"
            echo "service: $(grep -c '<service' "$manifest" 2>/dev/null || echo "0")개"
            echo "intent-filter: $(grep -c '<intent-filter' "$manifest" 2>/dev/null || echo "0")개"
            
            echo ""
            echo "--- 🎯 AlarmReceiver 핵심 검색 ---"
            if grep -q "AlarmReceiver" "$manifest"; then
              echo "✅ AlarmReceiver 발견!"
              echo "📍 AlarmReceiver 전체 내용:"
              grep -A 20 -B 2 "AlarmReceiver" "$manifest" | head -25
            else
              echo "❌ AlarmReceiver 없음"
            fi
            
            echo ""
            echo "--- 🔍 모든 receiver 태그 분석 ---"
            receiver_count=$(grep -c "<receiver" "$manifest" 2>/dev/null || echo "0")
            echo "총 receiver 개수: $receiver_count"
            if [ "$receiver_count" -gt 0 ]; then
              echo "📋 모든 receiver 목록:"
              grep -o 'android:name="[^"]*"' "$manifest" | grep -A1 -B1 receiver || echo "receiver name 추출 실패"
              echo ""
              echo "📋 receiver 태그들 (처음 10개):"
              grep -A 5 "<receiver" "$manifest" | head -30
            fi
            
            echo ""
            echo "--- 🔍 디버그 코드 검증 ---"
            if grep -q "NonExistentReceiver" "$manifest"; then
              echo "🎯 NonExistentReceiver 발견! (템플릿 적용됨)"
            else
              echo "❌ NonExistentReceiver 없음 (템플릿 무시됨)"
            fi
            
            echo ""
            echo "--- 📋 권한 목록 (알람 관련) ---"
            echo "WAKE_LOCK: $(grep -c 'WAKE_LOCK' "$manifest" 2>/dev/null || echo "0")개"
            echo "RECEIVE_BOOT_COMPLETED: $(grep -c 'RECEIVE_BOOT_COMPLETED' "$manifest" 2>/dev/null || echo "0")개"
            echo "SCHEDULE_EXACT_ALARM: $(grep -c 'SCHEDULE_EXACT_ALARM' "$manifest" 2>/dev/null || echo "0")개"
            echo "SET_ALARM: $(grep -c 'SET_ALARM' "$manifest" 2>/dev/null || echo "0")개"
            
            echo ""
            echo "--- 📋 전체 권한 목록 ---"
            grep '<uses-permission' "$manifest" | sed 's/.*android:name="//;s/".*//' | sort || echo "권한 목록 추출 실패"
            
            echo ""
            echo "--- 🔍 매니페스트 전체 내용 (처음 50줄) ---"
            head -50 "$manifest"
            
            echo ""
            echo "--- 🔍 매니페스트 전체 내용 (마지막 20줄) ---"
            tail -20 "$manifest"
            
          else
            echo "❌ 파일 없음: $manifest"
          fi
          echo ""
        done
        
        echo ""
        echo "=== 🎯 최종 요약 ==="
        echo "템플릿 적용 여부 최종 판단:"
        for manifest in "${MAIN_MANIFESTS[@]}"; do
          if [ -f "$manifest" ]; then
            if grep -q "NonExistentReceiver" "$manifest"; then
              echo "✅ $manifest - 템플릿 적용됨"
            else
              echo "❌ $manifest - 템플릿 무시됨"
            fi
          fi
        done

    # ✅ 빌드 로그 업로드
    - name: Upload build logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: build-logs-${{ github.run_number }}
        path: |
          build_full.log
          .buildozer/**/*.log
          .buildozer/**/AndroidManifest.xml
        retention-days: 30
        if-no-files-found: warn

    # ✅ APK 업로드
    - name: Upload APK
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: skku-timetable-apk
        path: bin/*.apk
        retention-days: 7
        if-no-files-found: error

    # 기존 워크플로우에 추가할 단계들
    
    # === 1단계: APK 빌드 완료 후 ===
    - name: Build APK with buildozer
      run: buildozer android debug
    
    # === 2단계: APK 후처리 도구 설치 ===
    - name: Install APK modification tools
      run: |
        echo "=== 🛠️ APK 수정 도구 설치 ==="
        
        # Java 설치 확인
        java -version
        
        # apktool 다운로드 및 설치
        echo "📥 apktool 다운로드..."
        wget -q https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool
        wget -q https://bitbucket.org/iBotPeaches/apktool/downloads/apktool_2.9.3.jar
        
        # apktool 실행 권한 및 설치
        chmod +x apktool
        sudo mv apktool /usr/local/bin/
        sudo mv apktool_2.9.3.jar /usr/local/bin/apktool.jar
        
        # 설치 확인
        apktool --version
        echo "✅ apktool 설치 완료"
    
    # === 3단계: APK 파일 확인 ===
    - name: Locate and verify APK file
      run: |
        echo "=== 📱 APK 파일 확인 ==="
        
        # APK 파일 찾기
        echo "🔍 APK 파일 위치 확인:"
        find . -name "*.apk" -type f | head -10
        
        # bin 디렉토리 확인
        echo ""
        echo "📁 bin/ 디렉토리 내용:"
        ls -la bin/ 2>/dev/null || echo "bin/ 디렉토리 없음"
        
        # APK 파일명 확정
        APK_FILE=$(find . -name "*debug*.apk" -type f | head -1)
        echo ""
        echo "🎯 대상 APK: $APK_FILE"
        echo "📊 파일 크기: $(du -h "$APK_FILE" | cut -f1)"
        
        # 환경변수로 저장
        echo "APK_FILE=$APK_FILE" >> $GITHUB_ENV
    
    # === 4단계: APK 디컴파일 ===
    - name: Decompile APK
      run: |
        echo "=== 🔓 APK 디컴파일 ==="
        
        # APK 디컴파일
        echo "📦 APK 디컴파일 중: $APK_FILE"
        apktool d "$APK_FILE" -o decoded_apk --force
        
        # 디컴파일 결과 확인
        echo ""
        echo "📁 디컴파일된 파일 구조:"
        ls -la decoded_apk/
        
        echo ""
        echo "📋 원본 AndroidManifest.xml 확인:"
        echo "파일 크기: $(wc -c < decoded_apk/AndroidManifest.xml) bytes"
        echo "줄 수: $(wc -l < decoded_apk/AndroidManifest.xml) 줄"
    
    # === 5단계: AndroidManifest.xml 분석 및 수정 ===
    - name: Analyze and modify AndroidManifest.xml
      run: |
        echo "=== 🔍 AndroidManifest.xml 분석 및 수정 ==="
        
        MANIFEST="decoded_apk/AndroidManifest.xml"
        
        echo "--- 📋 원본 매니페스트 분석 ---"
        echo "package: $(grep 'package=' "$MANIFEST" | head -1)"
        echo "receiver 개수: $(grep -c '<receiver' "$MANIFEST" 2>/dev/null || echo "0")"
        echo "service 개수: $(grep -c '<service' "$MANIFEST" 2>/dev/null || echo "0")"
        
        echo ""
        echo "--- 🎯 AlarmReceiver 추가 ---"
        
        # 추가할 receiver XML 생성
        cat > receiver_to_add.xml << 'EOF'
            <receiver android:name="org.kivy.skkutimetable.doublecheck.AlarmReceiver" 
                      android:enabled="true" 
                      android:exported="true">
                <intent-filter>
                    <action android:name="android.intent.action.BOOT_COMPLETED" />
                </intent-filter>
            </receiver>
        EOF
        
        echo "📝 추가할 receiver:"
        cat receiver_to_add.xml
        
        # 백업 생성
        cp "$MANIFEST" "${MANIFEST}.backup"
        
        # </application> 태그 찾기
        if grep -q "</application>" "$MANIFEST"; then
          echo "✅ </application> 태그 발견"
          
          # receiver 추가 (</application> 태그 바로 앞에)
          sed -i '/<\/application>/i\        <receiver android:name="org.kivy.skkutimetable.doublecheck.AlarmReceiver" android:enabled="true" android:exported="true">\
                <intent-filter>\
                    <action android:name="android.intent.action.BOOT_COMPLETED" />\
                </intent-filter>\
            </receiver>' "$MANIFEST"
          
          echo "✅ AlarmReceiver 추가 완료"
        else
          echo "❌ </application> 태그를 찾을 수 없음"
          exit 1
        fi
    
    # === 6단계: 수정 결과 검증 ===
    - name: Verify AndroidManifest.xml modification
      run: |
        echo "=== 🔍 수정 결과 검증 ==="
        
        MANIFEST="decoded_apk/AndroidManifest.xml"
        
        echo "--- 📊 수정 후 통계 ---"
        echo "receiver 개수: $(grep -c '<receiver' "$MANIFEST" 2>/dev/null || echo "0")"
        echo "AlarmReceiver 포함: $(grep -c 'AlarmReceiver' "$MANIFEST" 2>/dev/null || echo "0")"
        echo "BOOT_COMPLETED 포함: $(grep -c 'BOOT_COMPLETED' "$MANIFEST" 2>/dev/null || echo "0")"
        
        echo ""
        echo "--- 🎯 AlarmReceiver 블록 확인 ---"
        if grep -q "AlarmReceiver" "$MANIFEST"; then
          echo "✅ AlarmReceiver 발견!"
          grep -A 6 -B 2 "AlarmReceiver" "$MANIFEST"
        else
          echo "❌ AlarmReceiver 없음 - 수정 실패!"
          exit 1
        fi
        
        echo ""
        echo "--- 📋 수정된 매니페스트 구조 (application 섹션) ---"
        grep -A 20 "<application" "$MANIFEST" | grep -B 20 "</application>"
    
    # === 7단계: 디버그 키스토어 생성 ===
    - name: Create debug keystore
      run: |
        echo "=== 🔑 디버그 키스토어 생성 ==="
        
        # 디버그 키스토어 생성
        keytool -genkey -v \
          -keystore debug.keystore \
          -alias androiddebugkey \
          -keyalg RSA \
          -keysize 2048 \
          -validity 10000 \
          -dname "CN=Android Debug,O=Android,C=US" \
          -storepass android \
          -keypass android
        
        echo "✅ 디버그 키스토어 생성 완료"
        ls -la debug.keystore
    
    # === 8단계: APK 리빌드 ===
    - name: Rebuild APK
      run: |
        echo "=== 🔨 APK 리빌드 ==="
        
        # APK 리빌드
        echo "📦 APK 리빌드 중..."
        apktool b decoded_apk -o modified_doublecheck.apk
        
        # 리빌드 결과 확인
        if [ -f "modified_doublecheck.apk" ]; then
          echo "✅ APK 리빌드 성공"
          echo "📊 수정된 APK 크기: $(du -h modified_doublecheck.apk | cut -f1)"
        else
          echo "❌ APK 리빌드 실패"
          exit 1
        fi
    
    # === 9단계: APK 서명 ===
    - name: Sign modified APK
      run: |
        echo "=== ✍️ APK 서명 ==="
        
        # APK 서명
        echo "🔏 APK 서명 중..."
        jarsigner -verbose \
          -sigalg SHA1withRSA \
          -digestalg SHA1 \
          -keystore debug.keystore \
          -storepass android \
          -keypass android \
          modified_doublecheck.apk \
          androiddebugkey
        
        # 서명 검증
        echo ""
        echo "🔍 서명 검증:"
        jarsigner -verify -verbose modified_doublecheck.apk
        
        echo ""
        echo "✅ APK 서명 완료"
    
    # === 10단계: 최종 검증 ===
    - name: Final verification of modified APK
      run: |
        echo "=== 🎯 최종 검증 ==="
        
        # 최종 APK 정보
        echo "📱 최종 수정된 APK 정보:"
        ls -la modified_doublecheck.apk
        
        # APK 내용 확인 (AndroidManifest.xml 추출)
        echo ""
        echo "🔍 수정된 APK에서 AndroidManifest.xml 추출 검증:"
        unzip -p modified_doublecheck.apk AndroidManifest.xml > extracted_manifest.xml
        
        # 바이너리 매니페스트를 다시 디컴파일해서 확인
        echo "📋 최종 매니페스트에서 AlarmReceiver 확인:"
        apktool d modified_doublecheck.apk -o final_check --force
        
        if grep -q "AlarmReceiver" final_check/AndroidManifest.xml; then
          echo "✅ 최종 확인: AlarmReceiver 정상 포함됨!"
          grep -A 6 -B 2 "AlarmReceiver" final_check/AndroidManifest.xml
        else
          echo "❌ 최종 확인: AlarmReceiver 없음"
          exit 1
        fi
        
        echo ""
        echo "🎉 APK 수정 작업 완료!"
    
    # === 11단계: 아티팩트 업로드 ===
    - name: Upload modified APK
      uses: actions/upload-artifact@v3
      with:
        name: modified-apk
        path: |
          modified_doublecheck.apk
          final_check/AndroidManifest.xml

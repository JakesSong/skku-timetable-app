name: Build Android APK

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.9
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        
    - name: Set up Java 11 (for SDK tools) and Java 8 (for build)
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '11'
        
    - name: Set up Java 8 for buildozer
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '8'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y \
          git zip unzip autoconf libtool pkg-config \
          zlib1g-dev libncurses5-dev libncursesw5-dev libtinfo5 cmake \
          libffi-dev libssl-dev build-essential libsqlite3-dev sqlite3 \
          bzip2 libbz2-dev libreadline-dev llvm \
          xz-utils tk-dev libxml2-dev libxmlsec1-dev liblzma-dev \
          libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev \
          libportmidi-dev libswscale-dev libavformat-dev libavcodec-dev \
          libfreetype6-dev libpng-dev libjpeg-dev
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade setuptools wheel
        pip install Cython==0.29.33
        pip install buildozer==1.5.0
        
    - name: Create buildozer.spec
      run: |
        cat > buildozer.spec << 'EOF'
        [app]
        title = SKKU Timetable
        package.name = skkutimetable
        package.domain = org.kivy
        source.dir = .
        source.filename = main_simple.py
        source.include_exts = py,png,jpg,kv,atlas,ttf
        
        requirements = python3,kivy==2.1.0
        
        version = 0.1
        orientation = portrait
        fullscreen = 0
        
        # Minimal Android settings
        android.permissions = INTERNET
        android.api = 28
        android.minapi = 21
        android.ndk = 25b
        android.ndk_api = 21
        android.accept_sdk_license = True
        android.archs = armeabi-v7a
        android.allow_backup = True
        android.skip_update = False
        android.auto_last_revision = False
        
        [buildozer]
        log_level = 2
        warn_on_root = 1
        EOF
        
    - name: Create simple test app (optional)
      run: |
        cat > main_simple.py << 'EOF'
        from kivy.app import App
        from kivy.uix.label import Label
        
        class SimpleApp(App):
            def build(self):
                return Label(text='SKKU Timetable Test\n성균관대학교 시간표 테스트', 
                           font_size='20sp',
                           halign='center')
        
        if __name__ == '__main__':
            SimpleApp().run()
        EOF
        
        echo "=== Simple test app created ==="
        cat main_simple.py
        
    - name: Show buildozer.spec
      run: |
        echo "=== buildozer.spec content ==="
        cat buildozer.spec
        
    - name: Clean build
      run: |
        rm -rf .buildozer
        rm -rf bin
        # 캐시된 패키지도 정리
        rm -rf ~/.buildozer/android/packages
        # Gradle 캐시도 정리 (Java 버전 변경으로 인한)
        rm -rf ~/.gradle
        
    - name: Set environment variables
      run: |
        echo "JAVA_HOME_8=$JAVA_HOME_8_X64" >> $GITHUB_ENV
        echo "JAVA_HOME_11=$JAVA_HOME_11_X64" >> $GITHUB_ENV
        echo "JAVA_HOME=$JAVA_HOME_11_X64" >> $GITHUB_ENV
        echo "P4A_NUM_PROCS=1" >> $GITHUB_ENV
        echo "GRADLE_OPTS=-Dorg.gradle.daemon=false -Dorg.gradle.jvmargs='-Xmx3072m -XX:MaxMetaspaceSize=768m' -Dorg.gradle.parallel=false" >> $GITHUB_ENV
        # NDK 25b 사용 강제
        echo "ANDROIDNDK=" >> $GITHUB_ENV
        # Gradle wrapper 권한 설정
        echo "P4A_GRADLE_OPTS=--stacktrace --info" >> $GITHUB_ENV
        
    - name: Initialize buildozer (download Android SDK/NDK)
      run: |
        echo "=== Environment Check ==="
        echo "Java 8: $JAVA_HOME_8"
        echo "Java 11: $JAVA_HOME_11"
        echo "Current JAVA_HOME: $JAVA_HOME"
        java -version
        echo "Python: $(python --version)"
        
        echo "=== Initializing buildozer ==="
        # SDK manager를 위해 일시적으로 Java 11 사용
        export JAVA_HOME=$JAVA_HOME_11
        buildozer android update
        
        # 빌드를 위해 Java 8로 복원
        export JAVA_HOME=$JAVA_HOME_8
        echo "JAVA_HOME=$JAVA_HOME_8" >> $GITHUB_ENV
        
    - name: Accept SDK licenses
      run: |
        echo "=== Accepting Android SDK licenses ==="
        # SDK manager를 위해 Java 11 사용
        export JAVA_HOME=$JAVA_HOME_11
        yes | ~/.buildozer/android/platform/android-sdk/cmdline-tools/*/bin/sdkmanager --licenses || true
        
        # 빌드를 위해 Java 8로 복원
        export JAVA_HOME=$JAVA_HOME_8
        
    - name: Build APK with Java 11
      run: |
        echo "=== Starting APK build ==="
        export JAVA_HOME=$JAVA_HOME_11
        echo "Using Java 11 for build: $JAVA_HOME"
        java -version
        
        echo "=== Environment variables ==="
        echo "GRADLE_OPTS: $GRADLE_OPTS"
        echo "P4A_GRADLE_OPTS: $P4A_GRADLE_OPTS"
        
        echo "=== Starting buildozer with Java 11 ==="
        buildozer android debug --verbose
        
    - name: Check Gradle logs on failure
      if: failure()
      run: |
        echo "=== Checking Gradle build logs ==="
        find .buildozer -name "*.log" -type f -exec echo "=== {} ===" \; -exec cat {} \; || true
        
        echo "=== Gradle wrapper logs ==="
        find .buildozer -path "*/dists/*/gradle*" -name "*.log" -type f -exec echo "=== {} ===" \; -exec cat {} \; || true
        
        echo "=== Build directory structure ==="
        find .buildozer/android/platform/build-* -maxdepth 3 -type d || true
        
    - name: List build results
      run: |
        echo "=== Build Results ==="
        ls -la
        if [ -d "bin" ]; then
          echo "=== APK files ==="
          ls -la bin/
          for apk in bin/*.apk; do
            if [ -f "$apk" ]; then
              echo "APK file: $apk"
              file "$apk"
              echo "APK size: $(du -h "$apk")"
            fi
          done
        else
          echo "No bin directory found"
        fi
        
    - name: Upload APK
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: skku-timetable-apk
        path: bin/*.apk
        retention-days: 7
        if-no-files-found: error

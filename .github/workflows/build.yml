name: Build Android APK with Custom Buildozer

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 60

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.8
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-custom-buildozer
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Cache buildozer directory
      uses: actions/cache@v3
      with:
        path: .buildozer
        key: ${{ runner.os }}-buildozer-custom-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-custom-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          git \
          python3 \
          python3-dev \
          ffmpeg \
          libsdl2-dev \
          libsdl2-image-dev \
          libsdl2-mixer-dev \
          libsdl2-ttf-dev \
          libportmidi-dev \
          libswscale-dev \
          libavformat-dev \
          libavcodec-dev \
          zlib1g-dev \
          libgstreamer1.0-0 \
          libgstreamer1.0-dev \
          libunwind-dev \
          gstreamer1.0-plugins-base \
          gstreamer1.0-plugins-good \
          openjdk-17-jdk \
          unzip \
          libncurses5-dev \
          libncursesw5-dev \
          libtinfo5 \
          cmake \
          libffi-dev \
          libssl-dev

    - name: Set up Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Set up Android SDK
      uses: android-actions/setup-android@v3
      with:
        cmdline-tools-version: 8512546
        packages: "platforms;android-33 build-tools;32.0.0 platform-tools ndk;25.2.9519653"

    - name: Install custom buildozer with PR #1519 support
      run: |
        echo "🔧 === INSTALLING CUSTOM BUILDOZER ==="
        python -m pip install --upgrade pip
        
        # PR #1519가 적용된 buildozer fork 설치 (dvjdjvu의 fork)
        echo "📥 Installing custom buildozer fork with PR #1519..."
        pip install git+https://github.com/dvjdjvu/buildozer.git@master
        
        # python-for-android는 develop 브랜치 시도, 없으면 기본 kivy 버전 사용
        echo "📥 Installing custom python-for-android..."
        pip install git+https://github.com/dvjdjvu/python-for-android.git@develop || \
        pip install git+https://github.com/kivy/python-for-android.git@develop || \
        echo "⚠️ Using default python-for-android, will rely on buildozer fork for manifest support"
        
        echo "📦 Installing other dependencies..."
        pip install kivy==2.1.0
        pip install kivymd==1.1.1
        pip install cython==0.29.33
        pip install requests beautifulsoup4

    - name: Verify custom buildozer installation
      run: |
        echo "🔍 === VERIFYING CUSTOM BUILDOZER ==="
        
        echo "📋 Buildozer version:"
        buildozer version || pip show buildozer
        
        echo -e "\n📄 Testing extra_manifest_application_entry support:"
        python -c "
        try:
            from buildozer.targets.android import TargetAndroid
            print('✅ Custom buildozer imported successfully')
            # buildozer 소스코드에서 extra_manifest_application_entry 지원 확인
            import inspect
            print('✅ Checking for PR #1519 support...')
        except Exception as e:
            print(f'❌ Error: {e}')
        "

    - name: Verify project configuration  
      run: |
        echo "🔍 === PROJECT VERIFICATION ==="
        echo "📁 Current directory:"
        ls -la
        
        echo -e "\n📄 buildozer.spec key settings:"
        echo "🔧 Extra manifest entry (PR #1519):"
        grep -n "android.extra_manifest_application_entry" buildozer.spec || echo "❌ PR #1519 setting not found"
        echo "🔧 Android permissions:"
        grep -n "android.permissions" buildozer.spec || echo "❌ No permissions found"
        echo "🔧 Java source path:"
        grep -n "android.add_src" buildozer.spec || echo "❌ No Java source path found"
        
        echo -e "\n📁 xml/receivers.xml verification:"
        if [ -f xml/receivers.xml ]; then
          echo "✅ receivers.xml exists"
          echo "📄 Content:"
          cat xml/receivers.xml
        else
          echo "❌ xml/receivers.xml NOT found"
        fi
        
        echo -e "\n📁 Java source verification:"
        if [ -d android/src/main/java ]; then
          echo "✅ Java source directory exists"
          find android/src/main/java -name "*.java" -type f || echo "No Java files found"
        else
          echo "❌ Java source directory NOT found"
        fi

    - name: Accept Android SDK licenses
      run: |
        echo "🔑 === SDK LICENSES ==="
        yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses || true

    - name: Clean previous builds (selective)
      run: |
        echo "🧹 === CLEANING PREVIOUS BUILDS ==="
        if [ -d .buildozer/android/platform/python-for-android ]; then
          echo "✅ python-for-android exists, safe to clean"
          buildozer android clean
        else
          echo "⚠️ First time build - skipping clean"
        fi
        rm -rf bin

    - name: Build APK with custom buildozer
      run: |
        echo "🚀 === BUILDING APK WITH CUSTOM BUILDOZER ==="
        echo "⏰ Build started at: $(date)"
        
        echo -e "\n📝 Final buildozer.spec verification:"
        echo "Last 20 lines:"
        tail -20 buildozer.spec
        
        echo -e "\n🔨 Starting build with PR #1519 support..."
        buildozer android debug --verbose
        
        echo -e "\n✅ Build completed at: $(date)"
      timeout-minutes: 50

    - name: Verify AlarmReceiver in generated APK (완전 분석)
      if: success()
      run: |
        echo "🔍 === COMPLETE APK ANALYSIS ==="
        
        # APK 파일 찾기
        APK_FILE=$(find . -name "*.apk" -type f | head -1)
        if [ -z "$APK_FILE" ]; then
          echo "❌ APK file not found"
          exit 1
        fi
        
        echo "📱 Found APK: $APK_FILE"
        echo "📏 APK Size: $(ls -lh "$APK_FILE" | awk '{print $5}')"
        
        echo -e "\n🔍 === 1. FULL AndroidManifest.xml DUMP ==="
        $ANDROID_SDK_ROOT/build-tools/32.0.0/aapt dump xmltree "$APK_FILE" AndroidManifest.xml > full_manifest.txt
        echo "📄 Full manifest saved to full_manifest.txt (will be uploaded as artifact)"
        
        echo -e "\n🔍 === 2. SEARCHING FOR ALARMRECEIVER ==="
        echo "🔎 Searching for 'receiver' elements:"
        grep -n -A 10 -B 2 "receiver" full_manifest.txt || echo "❌ No receiver found"
        
        echo -e "\n🔎 Searching for 'AlarmReceiver' specifically:"
        grep -n -A 5 -B 5 -i "alarm.*receiver\|alarmreceiver" full_manifest.txt || echo "❌ No AlarmReceiver found"
        
        echo -e "\n🔎 Searching for 'BOOT_COMPLETED':"
        grep -n -A 5 -B 5 "BOOT_COMPLETED" full_manifest.txt || echo "❌ No BOOT_COMPLETED found"
        
        echo -e "\n🔍 === 3. APPLICATION ELEMENT ANALYSIS ==="
        echo "🔎 Application element and its children:"
        grep -n -A 50 "E: application" full_manifest.txt | head -100
        
        echo -e "\n🔍 === 4. PERMISSIONS CHECK ==="
        echo "🔎 All permissions:"
        grep -n "uses-permission" full_manifest.txt
        
        echo -e "\n🔍 === 5. APK CONTENTS ANALYSIS ==="
        echo "🔎 APK structure:"
        $ANDROID_SDK_ROOT/build-tools/32.0.0/aapt list -v "$APK_FILE" | head -20
        
        echo -e "\n🔎 Java classes in APK:"
        $ANDROID_SDK_ROOT/build-tools/32.0.0/aapt list "$APK_FILE" | grep -i "\.class$" | grep -i "alarm\|receiver" || echo "❌ No AlarmReceiver class found"
        
        echo -e "\n🔍 === 6. BUILDOZER.SPEC VERIFICATION ==="
        echo "🔎 Current extra_manifest setting:"
        grep -n "android.extra_manifest" buildozer.spec || echo "❌ No extra_manifest setting found"
        
        echo -e "\n📊 === SUMMARY ==="
        RECEIVER_COUNT=$(grep -c "E: receiver" full_manifest.txt 2>/dev/null || echo "0")
        BOOT_COUNT=$(grep -c "BOOT_COMPLETED" full_manifest.txt 2>/dev/null || echo "0")
        ALARM_COUNT=$(grep -c -i "alarm" full_manifest.txt 2>/dev/null || echo "0")
        
        echo "📈 Analysis Results:"
        echo "   - Receiver elements: $RECEIVER_COUNT"
        echo "   - BOOT_COMPLETED references: $BOOT_COUNT"
        echo "   - Alarm references: $ALARM_COUNT"
        
        if [ "$RECEIVER_COUNT" -gt 0 ] && [ "$BOOT_COUNT" -gt 0 ]; then
          echo "✅ SUCCESS: AlarmReceiver appears to be properly integrated!"
        elif [ "$BOOT_COUNT" -gt 0 ]; then
          echo "⚠️ PARTIAL: BOOT_COMPLETED found but no receiver element"
        else
          echo "❌ FAILED: No AlarmReceiver integration detected"
        fi

    - name: Collect full build logs and debugging info
      if: always()
      run: |
        echo "📁 === COLLECTING BUILD LOGS AND DEBUG INFO ==="
        
        # 디버그 정보 수집 디렉토리 생성
        mkdir -p debug_output
        
        echo "📄 Copying buildozer.spec..."
        cp buildozer.spec debug_output/ 2>/dev/null || echo "buildozer.spec not found"
        
        echo "📄 Copying full manifest analysis..."
        cp full_manifest.txt debug_output/ 2>/dev/null || echo "full_manifest.txt not found"
        
        echo "📄 Collecting buildozer logs..."
        find .buildozer -name "*.log" -type f -exec cp {} debug_output/ \; 2>/dev/null || echo "No .log files found"
        
        echo "📄 Collecting gradle logs..."
        find .buildozer -path "*/gradle*" -name "*.log" -type f -exec cp {} debug_output/ \; 2>/dev/null || echo "No gradle logs found"
        
        echo "📄 Collecting python-for-android logs..."
        find .buildozer -path "*/python-for-android*" -name "*.log" -type f -exec cp {} debug_output/ \; 2>/dev/null || echo "No p4a logs found"
        
        echo "📄 Creating build environment info..."
        cat > debug_output/build_env_info.txt << 'EOF'
        BUILD ENVIRONMENT INFO
        ======================
        Date: $(date)
        Python Version: $(python --version)
        Buildozer Version: $(buildozer version 2>&1 || echo "N/A")
        Java Version: $(java -version 2>&1 | head -3)
        Android SDK: $ANDROID_SDK_ROOT
        Available Build Tools: $(ls $ANDROID_SDK_ROOT/build-tools/ 2>/dev/null || echo "N/A")
        
        REPOSITORY INFO
        ===============
        Current Branch: $GITHUB_REF_NAME
        Commit SHA: $GITHUB_SHA
        Workflow Run: $GITHUB_RUN_NUMBER
        
        BUILDOZER.SPEC SETTINGS
        =======================
        EOF
        
        echo "📄 Adding buildozer.spec to env info..."
        cat buildozer.spec >> debug_output/build_env_info.txt 2>/dev/null || echo "buildozer.spec not found" >> debug_output/build_env_info.txt
        
        echo "📄 Creating directory structure log..."
        echo "FULL PROJECT STRUCTURE" > debug_output/project_structure.txt
        echo "======================" >> debug_output/project_structure.txt
        find . -type f -name "*.py" -o -name "*.java" -o -name "*.xml" -o -name "*.spec" -o -name "*.kv" | head -50 >> debug_output/project_structure.txt 2>/dev/null
        
        echo "📄 Creating buildozer directory structure..."
        echo "BUILDOZER DIRECTORY STRUCTURE" > debug_output/buildozer_structure.txt
        echo "=============================" >> debug_output/buildozer_structure.txt
        find .buildozer -type d | head -100 >> debug_output/buildozer_structure.txt 2>/dev/null || echo ".buildozer not found" >> debug_output/buildozer_structure.txt
        
        echo "📄 Checking for generated AndroidManifest templates..."
        echo "ANDROIDMANIFEST TEMPLATES" > debug_output/manifest_templates.txt
        echo "=========================" >> debug_output/manifest_templates.txt
        find .buildozer -name "*AndroidManifest*" -type f -exec echo "=== {} ===" \; -exec cat {} \; 2>/dev/null >> debug_output/manifest_templates.txt || echo "No manifest templates found" >> debug_output/manifest_templates.txt
        
        echo "📄 Debug output files created:"
        ls -la debug_output/
        
        echo "📊 Total debug output size:"
        du -sh debug_output/

    - name: Upload APK artifact
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: custom-buildozer-apk
        path: ./bin/*.apk
        if-no-files-found: warn

    - name: Upload complete debug package
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: complete-build-debug-logs
        path: |
          debug_output/
          ./.buildozer/android/platform/build-*/logs/
          ./.buildozer/**/*.log
          ./full_manifest.txt
        if-no-files-found: ignore
        retention-days: 30

    - name: Upload buildozer cache for inspection
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: buildozer-cache-debug
        path: |
          ./.buildozer/android/platform/python-for-android/
          ./.buildozer/android/platform/build-*/dists/*/templates/
          ./.buildozer/android/platform/build-*/dists/*/src/
        if-no-files-found: ignore
        retention-days: 7

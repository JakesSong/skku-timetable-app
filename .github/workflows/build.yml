name: Build Android APK (Standard)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 60

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.8
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-standard-v2
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Cache buildozer directory
      uses: actions/cache@v3
      with:
        path: .buildozer
        key: ${{ runner.os }}-buildozer-v2-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-v2-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          git \
          python3 \
          python3-dev \
          python3-setuptools \
          libsdl2-dev \
          libsdl2-image-dev \
          libsdl2-mixer-dev \
          libsdl2-ttf-dev \
          libportmidi-dev \
          zlib1g-dev \
          openjdk-17-jdk \
          unzip \
          libncurses5-dev \
          libncursesw5-dev \
          libtinfo5 \
          cmake \
          libffi-dev \
          libssl-dev \
          autotools-dev \
          autoconf \
          libtool \
          pkg-config

    - name: Set up Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Set up Android SDK
      uses: android-actions/setup-android@v3
      with:
        cmdline-tools-version: 8512546
        packages: "platforms;android-33 platforms;android-31 build-tools;33.0.2 build-tools;31.0.0 platform-tools ndk;25.2.9519653"

    - name: Set environment variables
      run: |
        echo "ANDROID_HOME=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/25.2.9519653" >> $GITHUB_ENV
        echo "NDKAPI=21" >> $GITHUB_ENV
        echo "$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_PATH

    - name: Install buildozer and dependencies
      run: |
        echo "üì¶ === INSTALLING BUILDOZER AND DEPENDENCIES ==="
        python -m pip install --upgrade pip setuptools wheel
        
        # ÏïàÏ†ïÏ†ÅÏù∏ Î≤ÑÏ†ÑÎì§ ÏÑ§Ïπò
        pip install buildozer==1.5.0
        pip install kivy==2.1.0
        pip install kivymd==1.1.1
        pip install cython==0.29.33
        pip install requests beautifulsoup4
        
        # python-for-android ÏßÅÏ†ë ÏÑ§Ïπò (Îçî ÏïàÏ†ïÏ†Å)
        pip install python-for-android==2023.6.11
        
        echo "‚úÖ All packages installed"

    - name: Verify installations
      run: |
        echo "üìã === VERIFICATION ==="
        echo "Buildozer version:"
        buildozer version
        
        echo "Python version:"
        python --version
        
        echo "Java version:"
        java -version
        
        echo "Android SDK location:"
        echo $ANDROID_SDK_ROOT
        
        echo "NDK location:"
        ls -la $ANDROID_SDK_ROOT/ndk/ || echo "NDK not found"

    - name: Accept Android SDK licenses
      run: |
        echo "üîë === ACCEPTING SDK LICENSES ==="
        yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses || true

    - name: Clean previous builds (safe)
      run: |
        echo "üßπ === CLEANING PREVIOUS BUILDS ==="
        # ÏïàÏ†ÑÌïú Î∞©ÏãùÏúºÎ°ú Ï†ïÎ¶¨
        rm -rf bin/
        rm -rf .buildozer/android/platform/build-*
        
        # python-for-android Ï∫êÏãúÎßå Ï†ïÎ¶¨ (Ï†ÑÏ≤¥ Ï†ïÎ¶¨ ÎåÄÏã†)
        if [ -d .buildozer/android/platform/python-for-android ]; then
          echo "Cleaning python-for-android cache..."
          rm -rf .buildozer/android/platform/python-for-android/.cache
        fi

    - name: Initialize buildozer
      run: |
        echo "üîß === INITIALIZING BUILDOZER ==="
        # buildozer.specÏù¥ ÏóÜÏúºÎ©¥ Ï¥àÍ∏∞Ìôî
        if [ ! -f buildozer.spec ]; then
          buildozer init
        fi
        
        echo "üìÑ Current buildozer.spec settings:"
        if [ -f buildozer.spec ]; then
          grep -E "android\.(api|minapi|sdk|ndk|permissions)" buildozer.spec || echo "Default settings will be used"
        fi

    - name: Build APK
      run: |
        echo "üöÄ === BUILDING APK ==="
        echo "‚è∞ Build started at: $(date)"
        
        # Îçî ÏÉÅÏÑ∏Ìïú Î°úÍ∑∏ÏôÄ Ìï®Íªò ÎπåÎìú
        buildozer android debug --verbose
        
        echo "‚úÖ Build completed at: $(date)"
      timeout-minutes: 45
      env:
        ANDROID_API: "33"
        ANDROID_MINAPI: "21"
        ANDROID_SDK: "${{ env.ANDROID_SDK_ROOT }}"
        ANDROID_NDK: "${{ env.ANDROID_SDK_ROOT }}/ndk/25.2.9519653"

    - name: Verify build results
      if: always()
      run: |
        echo "üì± === BUILD RESULTS ==="
        echo "üìÅ Searching for APK files..."
        find . -name "*.apk" -type f -exec ls -lh {} \; 2>/dev/null || echo "No APK files found yet"
        
        # Îã§ÏñëÌïú ÏúÑÏπòÏóêÏÑú APK Ï∞æÍ∏∞
        APK_PATHS=(
          "bin/*.apk"
          ".buildozer/android/platform/build-*/dists/*/bin/*.apk"
          ".buildozer/android/platform/build-*/bin/*.apk"
        )
        
        APK_FOUND=""
        for path in "${APK_PATHS[@]}"; do
          if ls $path 2>/dev/null; then
            APK_FOUND=$(ls $path 2>/dev/null | head -1)
            break
          fi
        done
        
        if [ -n "$APK_FOUND" ]; then
          echo "üì± Found APK: $APK_FOUND"
          echo "üìè APK Size: $(ls -lh "$APK_FOUND" | awk '{print $5}')"
          
          # APKÎ•º bin/ ÎîîÎ†âÌÜ†Î¶¨Î°ú Î≥µÏÇ¨
          mkdir -p bin/
          cp "$APK_FOUND" bin/
          echo "‚úÖ APK copied to bin/ directory"
        else
          echo "‚ùå No APK file found"
          echo "üìÅ Directory structure:"
          find .buildozer -name "*.apk" -o -name "dist" -o -name "bin" | head -20
        fi

    - name: Upload APK artifact
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: android-apk-${{ github.run_number }}
        path: |
          ./bin/*.apk
          ./.buildozer/**/bin/*.apk
        if-no-files-found: warn

    - name: Upload build logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ github.run_number }}
        path: |
          ./.buildozer/android/platform/build-*/logs/
          ./.buildozer/**/*.log
        if-no-files-found: ignore

    - name: Debug information on failure
      if: failure()
      run: |
        echo "üîç === DEBUG INFORMATION ==="
        echo "Directory structure:"
        ls -la
        
        echo "Buildozer directory:"
        ls -la .buildozer/ || echo "No .buildozer directory"
        
        echo "Recent log files:"
        find .buildozer -name "*.log" -mtime -1 -exec tail -50 {} \; || echo "No recent log files"
        
        echo "Environment variables:"
        env | grep -E "(ANDROID|JAVA|PATH)" | sort
